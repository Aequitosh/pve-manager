#!/bin/sh

# Abort if any command returns an error value
set -e

# This script is called as the last step of the installation of the package.
# All the package's files are in place, dpkg has already done its automatic
# conffile handling, and all the packages we depend of are already fully
# installed and configured.

set_lvm_conf() {
    LVM_CONF_MARKER="# added by pve-manager to avoid scanning"

    # keep user changes afterwards provided marker is still there..
    if grep -qLF "$LVM_CONF_MARKER" /etc/lvm/lvm.conf; then
        return 0 # only do these changes once
    fi

    OLD_VALUE="$(lvmconfig --typeconfig full devices/global_filter)"
    NEW_VALUE='global_filter=["r|/dev/zd.*|"]'

    export LVM_SUPPRESS_FD_WARNINGS=1

    # check global_filter
    # keep previous setting from our custom packaging if it is still there
    if echo "$OLD_VALUE" | grep -qvF 'r|/dev/zd.*|'; then
        SET_FILTER=1
        BACKUP=1
    fi
    # should be the default since bullseye
    if lvmconfig --typeconfig full devices/scan_lvs | grep -qv 'scan_lvs=0'; then
        SET_SCAN_LVS=1
        BACKUP=1
    fi
    if test -n "$BACKUP"; then
        echo "Backing up lvm.conf before setting pve-manager specific settings.."
        cp -vb /etc/lvm/lvm.conf /etc/lvm/lvm.conf.bak
    fi
    if test -n "$SET_FILTER"; then
        echo "Setting 'global_filter' in /etc/lvm/lvm.conf to prevent zvols from being scanned:"
        echo "$OLD_VALUE => $NEW_VALUE"
        # comment out existing setting
        sed -i -e 's/^\([[:space:]]*global_filter[[:space:]]*=\)/#\1/' /etc/lvm/lvm.conf
        # add new section with our setting
        cat >> /etc/lvm/lvm.conf <<EOF
devices {
     $LVM_CONF_MARKER ZFS zvols
     $NEW_VALUE
 }
EOF
    fi
    if test -n "$SET_SCAN_LVS"; then
        echo "Adding scan_lvs=0 setting to /etc/lvm/lvm.conf to prevent LVs from being scanned."
        # comment out existing setting
        sed -i -e 's/^\([[:space:]]*scan_lvs[[:space:]]*=\)/#\1/' /etc/lvm/lvm.conf
        # add new section with our setting
        cat >> /etc/lvm/lvm.conf <<EOF
devices {
     $LVM_CONF_MARKER LVM volumes
     scan_lvs=0
 }
EOF
    fi
}

migrate_apt_auth_conf() {
    output=""
    removed=""
    match=0

    while read -r l; do
        if echo "$l" | grep -q "^machine enterprise.proxmox.com/debian/pve"; then
            match=1
        elif echo "$l" | grep -q "machine"; then
            match=0
        fi

        if test "$match" = "1"; then
            removed="$removed\n$l"
        else
            output="$output\n$l"
        fi
    done < /etc/apt/auth.conf

    if test -n "$removed"; then
        if test ! -e /etc/apt/auth.conf.d/pve.conf; then
            echo "Migrating APT auth config for enterprise.proxmox.com to /etc/apt/auth.conf.d/pve.conf .."
            echo "$removed" > /etc/apt/auth.conf.d/pve.conf
        else
            echo "Removing stale APT auth config from /etc/apt/auth.conf"
        fi
        echo "$output" > /etc/apt/auth.conf
    fi
}

case "$1" in
  triggered)
    # We don't print a status message here, as dpkg already said
    # "Processing triggers for ...".

    # test if /etc/pve is mounted; else simple exit to avoid
    # error during updates
    test -f /etc/pve/local/pve-ssl.pem || exit 0;
    test -e /proxmox_install_mode && exit 0;

    # the ExecStartPre doesn't triggers on service reload, so just in case
    pvecm updatecerts --silent || true

    deb-systemd-invoke reload-or-try-restart pvedaemon.service
    deb-systemd-invoke reload-or-try-restart pvestatd.service
    deb-systemd-invoke reload-or-try-restart pveproxy.service
    deb-systemd-invoke reload-or-try-restart spiceproxy.service
    deb-systemd-invoke reload-or-try-restart pvescheduler.service

    exit 0;;

  configure)
    # Configure this package.  If the package must prompt the user for
    # information, do it here.

    mkdir /etc/pve 2>/dev/null || true

    if test ! -e /var/lib/pve-manager/apl-info/download.proxmox.com; then
        mkdir -p /var/lib/pve-manager/apl-info
        cp /usr/share/doc/pve-manager/aplinfo.dat /var/lib/pve-manager/apl-info/download.proxmox.com
        pveam update || true
    fi

    # Always try to clean old entry, even when proxmox-mail-forward entry is already present.
    # This ensures it will still be cleaned after an upgrade following a downgrade.
    if test -f /root/.forward; then
        sed -i '\!|/usr/bin/pvemailforward!d' /root/.forward
    fi

    if ! test -f /root/.forward || ! grep -q '|/usr/bin/proxmox-mail-forward' /root/.forward; then
        echo '|/usr/bin/proxmox-mail-forward' >>/root/.forward
    fi

    systemctl --system daemon-reload >/dev/null || true

    # same as dh_systemd_enable (code copied)

    UNITS="pvedaemon.service pveproxy.service spiceproxy.service pvestatd.service pvebanner.service pvescheduler.service pve-daily-update.timer"
    NO_RESTART_UNITS="pvenetcommit.service pve-guests.service"

    for unit in ${UNITS} ${NO_RESTART_UNITS}; do
        deb-systemd-helper unmask "$unit" >/dev/null || true

        # was-enabled defaults to true, so new installations run enable.
        if deb-systemd-helper --quiet was-enabled "$unit"; then
            # Enables the unit on first installation, creates new
            # symlinks on upgrades if the unit file has changed.
            deb-systemd-helper enable "$unit" >/dev/null || true
        else
            # Update the statefile to add new symlinks (if any), which need to be
            # cleaned up on purge. Also remove old symlinks.
            deb-systemd-helper update-state "$unit" >/dev/null || true
        fi
    done

    # FIXME: remove after beta is over and add hunk to actively remove the repo
    BETA_SOURCES="/etc/apt/sources.list.d/pvetest-for-beta.list"
    if ! test -f "$BETA_SOURCES" && dpkg --compare-versions "$2" 'lt' '8.0.1' && dpkg --compare-versions "$2" 'gt' '8.0~'; then
        echo "Removing the during beta added pvetest repository file again"
        rm -v "$BETA_SOURCES" || true
    fi

    set_lvm_conf

    if test ! -e /proxmox_install_mode; then
        # modeled after code generated by dh_start
        for unit in ${UNITS}; do
            if test -n "$2"; then
                dh_action="reload-or-restart";
            else
                dh_action="start"
            fi
            if systemctl -q is-enabled "$unit"; then
                deb-systemd-invoke $dh_action "$unit"
            fi
        done
    fi

    if test ! -e /proxmox_install_mode && test -n "$2" && dpkg --compare-versions "$2" 'lt' '7.2-11~'; then
        if test -e /etc/apt/auth.conf ; then
            migrate_apt_auth_conf
        fi
    fi
    ;;

  abort-upgrade|abort-remove|abort-deconfigure)
    ;;

  *) echo "$0: didn't understand being called with \`$1'" 1>&2
     exit 0;;
esac

exit 0
